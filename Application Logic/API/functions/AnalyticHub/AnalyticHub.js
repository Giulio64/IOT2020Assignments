/**
 * [Pure fabrication that rappresent the Analytic Hub to send data from the IOT Devices]
 */

const uuidv1 = require("uuid/v1");
const storage = require("../PersistanceStorage/PersistanceStorage");

var Mqtt = require("azure-iot-device-mqtt").Mqtt;
var DeviceClient = require("azure-iot-device").Client;
var Message = require("azure-iot-device").Message;

const KustoClient = require("azure-kusto-data").Client;
const KustoConnectionStringBuilder = require("azure-kusto-data")
  .KustoConnectionStringBuilder;

const CLUSTERNAME = "iottelemetry.francesouth";
let username = "giulio.serra1995@gmail.com";
let password = "Leopoldo64";

/**
 * [Create a new log inside the hub and inside the persistance Storage]
 * @author Giulio Serra <serra.1904089@studenti.uniroma1.it>
 * @param  {JSONS} sensor [Sensor that generated the data]
 * @param  {JSON} data [Data generated by the sensor]
 */
exports.sendMQTTData = function(sensor, data) {
  return new Promise((res, rej) => {
    if (sensor.ID === null || sensor.ID === undefined) {
      return rej(new Error("Missing sensor ID"));
    }

    if (
      sensor.connectionString === null ||
      sensor.connectionString === undefined
    ) {
      return rej(new Error("Missing sensor connection string"));
    }

    console.log({
      event: "sending trasmision to azure hub:",
      data: data,
      sensor: sensor
    });

    return createHubEvent(data, sensor.connectionString)
      .then((response) => {
        return res(response);
      })
      .catch(error => {
        return rej(error);
      });
  });
};

/**
 * [Get all the IOT telemetry from the Data Explorer linked to the IOT Hub]
 * @author Giulio Serra <serra.1904089@studenti.uniroma1.it>
 */
exports.getLogs = function() {
  return new Promise((res, rej) => {

    const kcs = KustoConnectionStringBuilder.withAadUserPasswordAuthentication(
      `https://${CLUSTERNAME}.kusto.windows.net`,
      username,
      password
    );

    const kustoClient = new KustoClient(kcs);
    kustoClient.execute("telemetrydb", "telemetryTable", (err, results) => {
        if (err)return rej(new Error(err));
        
        var logs = createWrapperFromRawData(results);

        var response = {};

        for(const IDLog in logs){

          const log = logs[IDLog];
          const logNode = {[IDLog]:log};

          if(response[log.sensorID] === undefined){
            var node = {[log.sensorID]:logNode};
            response = Object.assign(response,node);
          }else{
            response[log.sensorID] = Object.assign(response[log.sensorID],logNode);
          }

        }

        return res(response);
    });
    
  });
};


/**
 * Create a wrapper from the raw data coming from the Analytic hub in a readable wrapper
 * @param {JSON} rawData [Raw data coming from hub]
 */
function createWrapperFromRawData(rawData){

  try{
    const primaryResults = rawData.primaryResults; // all the tables inside the database
    const telemetryTableData = primaryResults[0]; // table containing the telemetry

    var table = {};
    table = Object.assign(table,telemetryTableData)

    var response = {}; // array containing the response of the log to the user

    var columns = []; // array containing the column's names

    for(const columnIndex in table.columns){
      columns.push(table.columns[columnIndex].name);
    } 

    for(const rowIndex in table._rows){

      var row = table._rows[rowIndex]; // contains the values of the row
      var formattedRow = {};
      var rowID = null;

      for(const valueIndex in row){

        const value = row[valueIndex];
        const column = columns[valueIndex];

        var keyValue = {};
        console.log({keyValue:keyValue})

        if(column !== "ID"){
         
          if(column === "Timestamp"){
            keyValue = {timestamp:value};
            formattedRow = Object.assign(formattedRow,keyValue);
          }else if(column === "SensorID"){
            keyValue = {sensorID:value};
            formattedRow = Object.assign(formattedRow,keyValue);
          }else if(column === "SensorName"){
            keyValue = {sensorName:value};
            formattedRow = Object.assign(formattedRow,keyValue);
          }else if(column === "SensorType"){
            keyValue = {sensorType:value};
            formattedRow = Object.assign(formattedRow,keyValue);
          }else if(column === "Origin"){
            keyValue = {origin:value};
            formattedRow = Object.assign(formattedRow,keyValue);
          }else if(column === "Value"){
            keyValue = {value:value};
            formattedRow = Object.assign(formattedRow,keyValue);
          }else
          {
            keyValue = {[column]:value};
            formattedRow = Object.assign(formattedRow,keyValue);
          }
            
        }else{
          rowID = value;
        }
      }

      response = Object.assign(response,{[rowID]:formattedRow});
    }

    return response;

  }catch(err){
    console.log({HubError:err})
    return {};
  }

}

/**
 * Create a new Event in the Analytic hub
 * @param {JSON} data [JSON with the data to send to the IOT hub]
 * @param {String} connectionString [Connection String of the sensor that sent the data]
 */
function createHubEvent(data, connectionString) {
  return new Promise((res, rej) => {
    const client = DeviceClient.fromConnectionString(connectionString, Mqtt);
    const message = new Message(JSON.stringify(data));

    return client
      .sendEvent(message)
      .then(response => {
        console.log({ response: response });
        return res(response);
      })
      .catch(error => {
        console.log({ errorAzureHub: error });
        return rej(error);
      });
  });
}
